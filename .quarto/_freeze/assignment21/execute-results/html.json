{
  "hash": "a679c49d4693371fda6f9203a1a07eb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Daily Assignment 21\"\nsubtitle: \"Ecosystem Science and Sustainability 330\"\nauthor: Jake Matullo\nformat: html\nexecute:\n  echoe: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dataRetrieval)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dataRetrieval' was built under R version 4.4.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(zoo)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'zoo' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tsibble)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tsibble' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:zoo':\n\n    index\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(feasts)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'feasts' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: fabletools\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'fabletools' was built under R version 4.4.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(fabletools)\nlibrary(tsibble)\nlibrary(rsample)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rsample' was built under R version 4.4.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'recipes' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'recipes'\n\nThe following object is masked from 'package:stringr':\n\n    fixed\n\nThe following object is masked from 'package:stats':\n\n    step\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(parsnip)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'parsnip' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'parsnip'\n\nThe following object is masked from 'package:fabletools':\n\n    null_model\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(modeltime)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'modeltime' was built under R version 4.4.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow <- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |>  # Set the end date\n  renameNWISColumns() |>                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |>                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tsibble(poudre_flow) %>%\n  gg_subseries() + \n  labs(title = \"Monthly Streamflow Patterns\", y = \"Flow (cfs)\", x = \"Year\") + \n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing `Date` as index variable.\nPlot variable not specified, automatically selected `y = Flow`\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](assignment21_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn this model, streamflow peaks around May and June, with an odd peak exhibited in early September. The season is the year and the subseries, aka the months, make up it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoudre_flow$Date <- as.Date(poudre_flow$Date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_ts <- ts(poudre_flow$Flow, start = c(2013, 1), frequency = 12)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstl_decomp <- stl(flow_ts, s.window = \"periodic\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(stl_decomp)\n```\n\n::: {.cell-output-display}\n![](assignment21_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe trend (referring to the measurement of the river's \"memory\") peaks at around 2015, but declines later on and remains relatively consistent after 2018. The seasonal data (the measurement of regular, periodic fluctuations in data) spikes at relatively consistent intervals around halfway through each year.\n\n**Assignment 22 Begins Below**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit <- initial_time_split(data = poudre_flow, prop = 0.8)\n#the command \"time_series_split\" doesn't actually exist FYI\n\ntraining <- training(split)\ntesting <- testing(split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narima_reg <- arima_reg() %>%\n  set_engine(\"auto_arima\")\n\nprophet_reg <- prophet_reg() %>%\n  set_engine(\"prophet\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmods <- list(arima_reg, prophet_reg)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels <- map(mods, ~ fit(.x, Flow ~ Date, data = training))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfrequency = 12 observations per 1 year\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels_tbl <- as_modeltime_table(models)\n\ncalibration_table <- modeltime_calibrate(models_tbl, testing, quiet = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_tbl <- models_tbl %>%\n  modeltime_forecast(h = \"12 months\", actual_data = poudre_flow)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture_poudre_flow <- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2024-01-01\",   # Set the start date\n                          endDate = \"2025-01-01\") %>% # Set the end date\n  renameNWISColumns() %>%                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = yearmonth(Date)) %>%                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) %>%                      # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2024-01-01&endDT=2025-01-01\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tsibble(future_poudre_flow) %>%\n  gg_subseries() + \n  labs(title = \"Monthly Streamflow Patterns\", y = \"Flow (cfs)\", x = \"Month\") + \n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing `Date` as index variable.\nPlot variable not specified, automatically selected `y = Flow`\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](assignment21_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "assignment21_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}